function [] = createPDF(Ai, Ao, PDF_FileName, PN_name)
%function []= createPDF(Ai, Ao, PDF_Filename, PN_name)
% This function will create a PDF file for you.
% For example, if you want to create a PDF file like the following:
    % % PDF: pdf8147_pdf.m
    % 
    % function [png] = pdf8147_pdf.m()
    % 
    % png.PN_name = 'Marked Graph example';
    % png.set_of_Ps = {'p1','p2','p3','p4','p5','p6'};
    % png.set_of_Ts = {'t1','t2','t3','t4'};
    % png.set_of_As = {'p2','t1',1, 't1','p1',1, 't1','p5',1, ... % t1
    %                  'p1','t2',1, 'p6','t2',1, 't2','p2',1, ... % t2
    %                  'p4','t3',1, 'p5','t3',1, 't3','p3',1, ... % t3
    %                  'p3','t4',1, 't4','p4',1, 't4','p6',1, ... % t4
    %                };
% Then you can simply feed the following input parameter 
% so that createPDF will create the file for you. 
% Input parameters:
%       1. Ai (input incidence matrix) MUST be given
%       2. Ao (output incidence matrix) MUST be given
%       3. PDF_Filename (name of the PDF file) OPTIONAL: if not given,
%                name of the PDF file will be 'pdfxxx_pdf.m'
%       4. PN_name (name of the Petri net) OPTIONAL: if not given,
%                name of the Petri net will appear as 'pdfxxx'
% 
% EXAMPLE:
%   Ai   =   [ 0     1     0     0     0     0; ...
%              1     0     0     0     0     1; ...
%              0     0     0     1     1     0; ...
%              0     0     1     0     0     0]; 
%  
%   Ao =     [ 1     0     0     0     1     0; ...
%              0     1     0     0     0     0; ...
%              0     0     1     0     0     0; ...
%              0     0     0     1     0     1];
%   PDF_filename = 'mg1_pdf.m';
%   PN_name = 'Marked Graph example';
%   createPDF((Ai, Ao, PDF_Filename, PN_name);
%
%
%   Reggie.Davidrajuh@uis.no (c)  June 2016

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Step-1: Check Ai and Ao
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if lt(nargin, 2),
    disp('Proper usage of this function');
    disp('createPDF(Ai, Ao, PDF_Filename, PN_name))');
    error('not enough inputs for the function "createPDF"');
end;
    
% number of places and transitions
[Ts, Ps] = size(Ai);
[n,   m] = size(Ao);
if not(eq(m, Ps)), 
    error('number of places in Ai and Ao are different'); 
end;
if not(eq(n, Ts)), 
    error('number of transitions in Ai and Ao are different'); 
end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Step-2: Process out filename for PDF 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if lt(nargin, 3) % file name for PDF is NOT given
    PDF_FileName = ['pdf', num2str(floor(unifrnd(1, 10000))),'_pdf.m']; 
end;
fid = fopen(PDF_FileName, 'w'); % open the file with write permission

lineStr = '% This PDF file was generated by "createPDF" function on ';
fprintf(fid, '%s\n', lineStr); 
DateTime = fix(clock); HMS = DateTime(4:end);
lineStr = ['% On ', date, '   at ', int2str(HMS(1)),':',int2str(HMS(2)),':',int2str(HMS(3))];
fprintf(fid, '%s\n', lineStr);
lineStr = ['% PDF: ', PDF_FileName]; fprintf(fid, '%s\n\n', lineStr);
lineStr = ['function [png] = ', PDF_FileName(1:end-2), '()']; 
fprintf(fid, '%s\n\n', lineStr);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Step-3: Process the name of the Petri net module
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if lt(nargin, 4) % Name for the Petri net is NOT given
    PN_name = 'PDFxxx'; 
end;
lineStr = ['png.PN_name = ', char(39), PN_name, char(39), ';'];
fprintf(fid, '%s\n', lineStr);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Step-4: Print the set of places 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pxs = 0;  % to limit 10 place names per line
lineStr = 'png.set_of_Ps = {';
for i = 1:Ps,
    pxs = pxs + 1;
    if eq(pxs, 10),
        lineStr = [lineStr, '...']; fprintf(fid, '%s\n', lineStr); 
        lineStr = '          ';
        pxs = 0;          
    end;          
    lineStr = [lineStr, char(39), 'p', int2str(i), char(39),','];
end;
lineStr = [lineStr(1:end-2), char(39), '};']; 
fprintf(fid,'%s\n',lineStr);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Step-4: Print the set of transitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
txs = 0;  % to limit 10 transition names per line
lineStr = 'png.set_of_Ts = {';
for i = 1:Ts,
    txs = txs + 1;
    if eq(txs, 10),
        lineStr = [lineStr, '...']; fprintf(fid, '%s\n', lineStr); 
        lineStr = '          ';
        txs = 0;          
    end;          
    lineStr = [lineStr, char(39), 't', int2str(i), char(39),','];
end;
lineStr=[lineStr(1:end-2), char(39), '};']; 
fprintf(fid,'%s\n',lineStr);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Step-4: Print the set of arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
lineStr = 'png.set_of_As = {';
%axs = 0; % to limit 4 arcs per text line
for i = 1:Ts, 
    for j = 1:Ps,
        if Ai(i, j), % there is an input from pj to ti
            %axs = axs + 1;
            lineStr = [lineStr,char(39), 'p',int2str(j),char(39),','];
            lineStr = [lineStr,char(39), 't',int2str(i),char(39),','];
            lineStr = [lineStr, int2str(Ai(i,j)), ', '];   
        end;
    end;
    for j = 1:Ps,
        if Ao(i, j), % there is an output from ti to pj 
            %axs = axs + 1;
            lineStr = [lineStr,char(39), 't',int2str(i),char(39),','];
            lineStr = [lineStr,char(39), 'p',int2str(j),char(39),','];
            lineStr = [lineStr, int2str(Ao(i,j)), ', '];   
        end;
    end;
    lineStr = [lineStr, '... ', '% t', int2str(i)]; 
    fprintf(fid, '%s\n', lineStr); 
    lineStr = '                 ';
end;
lineStr = [lineStr(1:end-2), '};']; 
fprintf(fid, '%s\n', lineStr);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Step-5: Close the PDF file and print it in screen 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fclose(fid);
type(PDF_FileName);
